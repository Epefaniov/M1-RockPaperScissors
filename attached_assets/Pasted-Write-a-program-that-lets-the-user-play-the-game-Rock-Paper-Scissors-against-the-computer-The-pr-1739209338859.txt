Write a program that lets the user play the game Rock, Paper, Scissors against the computer. The
program should work as follows:
Write the program so that the game proceeds in a loop where the computer and a human play
multiple rounds of the game in a tournament. A score is kept for each player of the number of wins.
The human player determines when the tournament ends at which point the player (computer or
human) with the highest score is declared the winner and the final score is displayed. Note that
each round can end in a draw and the entire tournament can also end in a draw.
Inside the game loop:
When the program begins, a random number in the range of 1 through 3 is generated (see below for
a reminder of how to generate an appropriate random number). If the number is 1, then the
computer has chosen rock. If the number is 2, then the computer has chosen paper. If the number
is 3, then the computer has chosen scissors. (Don’t display the computer’s choice yet.)
Prompt the human player to enter his or her choice of “rock”, “paper”, or “scissors” or “quit” at the
keyboard. (You can use a menu if you prefer.) Validate the human player’s input so that only those 4
choices are valid inputs.
If the player does not choose to quit do the following
Display the computer’s choice.
Select a winner (computer, human, or draw) according to the following rules:
• If one player chooses rock and the other player chooses scissors, then rock wins.
(The rock smashes the scissors.)
• If one player chooses scissors and the other player chooses paper, then scissors
wins. (Scissors cuts paper.)
• If one player chooses paper and the other player chooses rock, then paper wins.
(Paper wraps rock.)
• If both players make the same choice, declare the round a draw.
Once a winner has been chosen update the scores (add one to computer score if computer
won the round, add one to the human player’s score if the human won the round, don’t add
anything if the round ended in a draw).
Otherwise,
Determine and display the winner of the tournament and end the program.
This program must be modular and procedural (i.e. do not write a class even if you already know to
do that). Here are some suggested functions to use:
• A function to prompt the human player to select rock, paper, scissors, or quit (to end the
tournament). Use a validation loop to ensure that the player’s choice is one of the 4 options.
Return the player’s choice.
• A function that takes as input the computer’s choice and the human player’s choice and
returns the winner (or draw both chose the same item).
• A function that takes as input the winner of the round, the computer’s score, and the
player’s score and updates the winner’s score (or neither’s score if the match was a draw).
• A function that takes as input the computer’s score and the human player’s score and
declares a tournament winner (of draw if the scores are even.
Include a structure chart in your design notes.
Random Numbers
• A random number is a value chosen unpredictably and without a pattern, like picking a
number out of a hat.
• Computers usually generate random numbers using algorithms.
• These algorithms rely on an initial value, called a "seed."
• By applying mathematical formulas to this seed, they produce a sequence of numbers
that appear random.
• It's like turning a crank on a machine that spits out seemingly random numbers, even
though the process is actually quite systematic.
How Random Numbers Are Used
• Random numbers are useful for lots of different programming tasks such as:
o Computer games that let the player roll dice use random numbers to represent the
values of the dice.
o Programs that show cards being drawn from a shuffled deck use random numbers
to represent the face values of the cards.
o In simulation programs where the computer must randomly decide how a person,
animal, insect, or other living being will behave.
o In statistical programs that must randomly select data for analysis.
o In computer security to encrypt sensitive data.
• To use these capabilities, you will need the following precompiler directive: #include
<random>
Random Number Objects
• To generate random numbers, you will need to define two objects in your program:
o A random number engine
o A distribution object
• The random number engine generates a sequence of random bits.
• The distribution object reads the random bits that are generated by the random number
engine and produces random numbers of a specified data type, within a specified range.
The Random Number Engine
• The C++ library provides several random number engines that you can use, depending on
the needs of your application.
• The on we will use is the random_device engine, which is adequate for most applications.
• Here is an example of how you define a random_device engine named myEngine:
• random_device myEngine;
The Distribution Object
• This statement declares a uniform_int_distribution object to generate random integers
between 0 and 100:
uniform_int_distribution<int> randomInt(0, 100);
• You can specify any of the C++ integer types (short, int, long, etc.).
• This statement will define a distribution object that generates random floating-point
numbers between 0.0 and 1.0:
uniform_real_distribution<double> randomReal(0.0, 1.0);
Generating a Random Number
Assuming we have defined a random number engine named myEngine and a distribution object
named randomReal, the following statement will generate a random floating-point number and
assign it to the number variable:
double number = randomReal(myEngine);
Example
